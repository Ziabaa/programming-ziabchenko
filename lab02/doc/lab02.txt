Зябченко Іван Володимирович 922а 
'Основи debug процессу'
1.-Зареєструватися на однієї з загально-доступних систем, таких як gitlab, github.
Зайшовши на сайт https://github.com, я зареєструвався.
-Створити там приватний репозиторій за допомогою веб інтерфейсу проекту.
Я стоврив приватний репозиторій під назвою 'programing-ziabchenko', та додав вчителя до 
collaborants, тобто зробив доступним для нього репозиторій.
Результатом є створення свого аккаунта на github, та створення першого репозиторія.
2.Склонуватися з створеного репозиторія.
Для цього викoнав команду "git clone https://github.com/Ziabaa/programming-ziabchenko.git",
ввів логін та токен, та все склонувалося.
Результатом є клонування створеного репозиторія у папку programming-ziabchenko.
3.Створити наступні каталоги в своєму репозиторію: lab02, lab02/src.
Створив каталоги lab02/src, за допомогою команди "mkdir", перевірив та отримав результат:
.
└── lab02
    └── src
-Скопіювати наступні елементи:
.файл .clang-format з проекта sample_project до кореня вашого репозиторія
.файл .clang-tidy з проекта sample_project до кореня вашого репозиторія
.файл .gitlab-ci.yml з проекта sample_project до кореня вашого репозиторія
.файл Doxyfile з каталогу lab00 проекта sample_project до каталогу lab02 вашого репозиторія
.файл Makefile з каталогу lab00 проекта sample_project до каталогу lab02 вашого репозиторія
.файл README.md з каталогу lab00 проекта sample_project до каталогу lab02 вашого репозиторія
.каталог src з каталогу lab00 проекта sample_project до каталогу lab02 вашого репозиторія
Для виконання цієї задачі потрібно використати команду :"cp". Виконав наступні дії: 
"cp sample_project/.clang-tidy  programing-ziabchenko " 
"cp sample_project/.gitlab-ci.yml  programing-ziabchenko " 
"cp sample_project/.clang-format  programing-ziabchenko " 
"cp sample_project/lab00/Doxyfile programing-ziabchenko/lab02 " 
"cp sample_project/lab00/Makefile programing-ziabchenko/lab02 "
"cp sample_project/lab00/README.md programing-ziabchenko/lab02 "
"cp sample_project/lab00/src programing-ziabchenko/lab02 "
Та отримав таку структуру
.
├── .clang-format
├── .clang-tidy
├── .git
├── .gitlab-ci.yml
├── README.md
└── lab02
    ├── Doxyfile
    ├── Makefile
    ├── README.md
    └── src
        ├── lib.c
        ├── lib.h
        └── main.c
В результаті ми скопіювали всі потрібні нам файли та директорії, які потрібно було скопіювати за 
завданням.
4.Зафіксувати зміни під назвою "Initial copy of sample_project". 
Зайшов до каталогу 'programing-ziabchenko' та виконав команду git status, побачив сторені мною директорії. 
Після цого додав їх за допомогою команди 'git add', тим самим додав їх. наступним кроком зафіксував зміни 
за допомогою команди: git commit "Initial copy of sample_project", все виеоналось без помилок.
5.Виконати зміни на розсуд викладача, зібрати проект (зкомпілувати) та продемонструвати зміни.(додав новий
вит тварини)
Для цього я зайшов до каталогу 'lab02/src' там виконав зміни у файлі 'lib.c', а саме додав такі деталі коду:
             case SNAKE:
                result = "Змея";
               break;
Далі виконав зміни у файлі 'lib.h, а саме додав:
            SNAKE, /**< Змея >*/
Наступним кроком я скомпілював проект за допомогою команди, що я додавав раніше - 'make all', не отримавши 
помилок я продовжив працювати. Подивився на отриманий результат після виконання команди /.main.bin, та 
результатом виконання було:
    Інформація про тварину №01: Кіт: зріст = 2 см, маса = 17 гр.
    Інформація про тварину №02: Корова: зріст = 9 см, маса = 121 гр.
    Інформація про тварину №03: Кіт: зріст = 110 см, маса = 12 гр.
    Інформація про тварину №04: Змія: зріст = 36 см, маса = 69 гр.
    Інформація про тварину №05: Корова: зріст = 51 см, маса = 39 гр.
    Інформація про тварину №06: Свиня: зріст = 81 см, маса = 9 гр.
    Інформація про тварину №07: Собака: зріст = 118 см, маса = 126 гр.
    Інформація про тварину №08: Кіт: зріст = 18 см, маса = 83 гр.
    Інформація про тварину №09: Собака: зріст = 110 см, маса = 11 гр.
    Інформація про тварину №10: Змія: зріст = 109 см, маса = 49 гр.
    Інформація про тварину №11: Свиня: зріст = 3 см, маса = 43 гр.
    Інформація про тварину №12: Кіт: зріст = 47 см, маса = 44 гр.
    Інформація про тварину №13: Корова: зріст = 89 см, маса = 28 гр.
    Інформація про тварину №14: Кіт: зріст = 24 см, маса = 56 гр.
    Інформація про тварину №15: Собака: зріст = 110 см, маса = 107 гр.
    Інформація про тварину №16: Собака: зріст = 0 см, маса = 54 гр.
    Інформація про тварину №17: Кіт: зріст = 37 см, маса = 45 гр. 
Результатом всіх виконаних дій стало додання нової тварини - 'Змії', помилок не було при виконанні. 
6.Відкрити в відлагоднику (debugger) lldb ваш виконуючий файл, зупинитися на будь-якій строці та 
визначити значення змінних (variables). Слід поекспериментувати з можливостями відлагодника "Step in",
"Step over", "Step out". 
У цьому пункті потрібно спочатку ввести команду lldb, та увійти до відлагодника, для того щоб переміщуватися 
потрібно використовувати команду 'l 1', а далі просто 'l'. Для того щоб увійти у функцію (виконати "Step in"),
потрібно ввести у командну строку 's'."Step over"- відповідає за переміщення по конструкції, виконується  
за допомогою команди 'n'. "Step out"- вихід із функції, виконується  за допомогою команди 'finish'.
Тобто ми дізналися про нові нам команди у відлагоднику lldb.
7. Зафіксувати зміни за допомогою команди git commit.
Увівши команду 'git status' - перевірив змінені та додані файли, далі виконавши каманду 'git add .', 
зберіг усі зміни. Але є папка яку система не може відстежити, тому протрібно віконати такі дії:
-Вийти до головної директорії та створити в ній папку '.gitignor' 
-Далі написати до неї /dist за допомогою команди vim .gitignor
-Ввести  'git status', та наступним кроком додати .gitignor, за допомогою команди'git add'.
А вже виконавши всі пункти віконати команду 'git commit'
8.Дослідити режими компіляції з інформацією про відлагодження та без неї; описати різницю.
Для виконання цого завдання потрібно виконати команду vim Makefile зайшовщи при цьому у папку lab02, та 
спробувати видалити -g, після цього виконати компіляцію проєкту. Наступним кроком буде виконання команди lldb, 
на перший погляд все добре, але як тільки починаеш намагатися крокувати кодом, то ніякої інформації немає,
Отже, саме ця функція давала нам змогу працювати з відлагодником. Потім для того щоб повернути '-g', потрібно
ввести команду 'git status', та використавши комнду 'git reset', повертаємось до моменту на якому не вводили зміни 
у коді після 'git commit'.
У результаті дослідження компіляції з інформацією про відлагодження та без неї, ми зрозуміли що без інформації
про відлагодження, ми не зможимо нічого робити у відлагоднику.
9.Завантажити зміни за допомогою команди git push. 
Завантажили.

Отже у цій лабораторній роботі ми ще глибше познайомилися із командною строкою Linux, вивчили початкові команди
у відлагоднику, та вдосконалили наші знання взагалі.
