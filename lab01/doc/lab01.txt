Зябченко Іван Володимирович 922а
Робота номер 1,
Тема: "Освоєння командної строки Linux"
1. Знайти, завантажити та інсталювати додаток VirtualBox.
Треба на сайті https://www.virtualbox.org/ скачати потрібну версію, в залежності від 
системи, після чого інсталювати її.
В результаті отримав інстальовану машину, куди в подальшому зможу завантажити віртуальну ОС.
2. Знайти, завантажити та встановити образ Linux системи для подальшої роботи.
Спочатку потрібно завантажити вибраний вами образ Linux системи, в моєму випадку я завантажив
Linux Mint. Після чого потрібно запустити через встановлений вами VirtualBox вашу  Linux систему.
Якщо потрібно, то оновити її до останньої версії.
Отже, ми отримали вже готовий образ Linux систему і маємо змогу працювати в ній у подальшому.
3.Інсталювати мінімально-необхідні пакети (програмні додатки): git, clang, clang-format, clang-tidy, tree, make.
Інсталювати їх можна за доромогою команди, в моєму випадку я скористався командою "apt install", у мене вийшло
так "apt install git clang clang-format clang-tidy tree make", піля чого було встановлено всі потрібні пакети
(програмні додатки).
В результаті виконаних дій, у нас відкрилась можливість користуватися пакетами, що ми додали.
4.За допомогою системи контролю версіями git та команди git clone виконати клонування проекту.
Потрібно ввести команду git clone та після цього вставити посилання на той сайт в якому знаходиться інформація, 
яку нам потрібно клонувати. я ввів команду "git clone https://github.com/davydov-vyacheslav/sample_project". 
Після цого отримав:
    Cloning into 'sample_project'...
    remote: Enumerating objects: 210, done.
    remote: Counting objects: 100% (60/60), done.
    remote: Compressing objects: 100% (35/35), done.
    remote: Total 210 (delta 29), reused 47 (delta 21), pack-reused 150
    Receiving objects: 100% (210/210), 440.92 KiB | 1.25 MiB/s, done.
    Resolving deltas: 100% (97/97), done.
Тобто ми отримали інфонрмацію, щодо того наша потрібна інформація була клонована в папку 'sample_project', 
це нам засвідчує строка 
Cloning into 'sample_project'...
Отже віконаши всі потрібні команди, ми отримали склоновану у папку, потрібну нам інформацію, та вдосокналили 
свої знання про програмний пакет git clone, та за що він відповідає.
5.Ознайомитися з утилітою tree. Необхідно зайти в директорію склонованого проекту та завдяки утиліти tree
 необхідно вивести на екран структуру каталогів проекту.
Зайшов до склонованої директорії sample_project, та побачив структуру склонованих каталогів проекту.
Отже я зрозумів як працює ультиліта treе, та побачив в якому форматі я отримую структуру.
6. Зібрати проект (зкомпілувати).
Для компіляції потрібно для початку знайти файл Makefile, який знаходиться у склонованому каталозі.
перевіривши його найавність за допомогою команди ls, після цого виконати команду make clean prep compile check, 
побачиши що помилок немає, треба зайти нового каталогу під назвою dist, ознайомитися з його наповненням, буде main.bin.
Виконати команду ./main.bin, та отримати такий результат
    Інформація про тварину №01: Кіт: зріст = 2 см, маса = 17 гр.
    Інформація про тварину №02: Корова: зріст = 9 см, маса = 121 гр.
    Інформація про тварину №03: Кіт: зріст = 110 см, маса = 12 гр.
    Інформація про тварину №04: Корова: зріст = 36 см, маса = 69 гр.
    Інформація про тварину №05: Собака: зріст = 51 см, маса = 39 гр.
    Інформація про тварину №06: Свиня: зріст = 81 см, маса = 9 гр.
    Інформація про тварину №07: Собака: зріст = 118 см, маса = 126 гр.
    Інформація про тварину №08: Кіт: зріст = 18 см, маса = 83 гр.
    Інформація про тварину №09: Собака: зріст = 110 см, маса = 11 гр.
    Інформація про тварину №10: Корова: зріст = 109 см, маса = 49 гр.
В результаті виконаних дій ми зкомпілювали проект та отримали результат, тобто змогли зкомпілювати проект.
7.Виконати (обґрунтовано) будь-які зміни до коду, але при умові, що:
-наступна компіляція проекту буде виконана без помилок;
-зміни можна побачити у даних, що виводяться на екран проектом.
Для початку потрібно перейти на папку вище, за допомогою команди cd .., потім перейти до до каталогу src,
подивитися які докумети в ньому є. Виконавши команду vim lib.h тим самим побачив написаний код у lib.h, передивившись його
я побачив на мою думку можливу зміну, що зможу провести без помилок у подальшому, а саме змінити кількість тварин. виконавши такі дії:
-#define ANIMAL_COUNT 10, змінив 10 на 17, та в результаті отримав 
-#define ANIMAL_COUNT 17
Отже ми внесли певні зміни в код, та подивилися на певне його наповнення.
8. Перекомпілювати проект та продемонструвати зміни, що помітні при виведенні на екран.
Перекомпілювати проект потрібно за тією ж послідовністю що і в пункті '6.', та отримати результат без помилок, і подивитися 
на зміни що ми внесли. А виглядати повинно так:
    Інформація про тварину №01: Кіт: зріст = 2 см, маса = 17 гр.
    Інформація про тварину №02: Корова: зріст = 9 см, маса = 121 гр.
    Інформація про тварину №03: Кіт: зріст = 110 см, маса = 12 гр.
    Інформація про тварину №04: Корова: зріст = 36 см, маса = 69 гр.
    Інформація про тварину №05: Корова: зріст = 51 см, маса = 39 гр.
    Інформація про тварину №06: Свиня: зріст = 81 см, маса = 9 гр.
    Інформація про тварину №07: Собака: зріст = 118 см, маса = 126 гр.
    Інформація про тварину №08: Кіт: зріст = 18 см, маса = 83 гр.
    Інформація про тварину №09: Собака: зріст = 110 см, маса = 11 гр.
    Інформація про тварину №10: Корова: зріст = 109 см, маса = 49 гр.
    Інформація про тварину №11: Свиня: зріст = 3 см, маса = 43 гр.
    Інформація про тварину №12: Кіт: зріст = 47 см, маса = 44 гр.
    Інформація про тварину №13: Корова: зріст = 89 см, маса = 28 гр.
    Інформація про тварину №14: Кіт: зріст = 24 см, маса = 56 гр.
    Інформація про тварину №15: Собака: зріст = 110 см, маса = 107 гр.
    Інформація про тварину №16: Собака: зріст = 0 см, маса = 54 гр.
    Інформація про тварину №17: Кіт: зріст = 37 см, маса = 45 гр.
В результаті ми отримали новий результат після компіляції, який як і зазначалося без помилок.
9.Виконати зміни в Makefile:
-додати ціль all, яка буде виконувати цілі clean prep compile check;
-перевірити роботу Makefile, шляхом виконання команди make all;
Заходимо до фалу 'Makefile' та додаємо команду у останньому рядку:
all: clean prep compile check
Перевфривши виконання команди make all, все спрацювало, отже все зроблено вірно.
Результатом є компіляція проєкту, та удостовіреня правильності виконання умови додання команди make all без помилок.
10.Визначити поточну версію утиліти clang та make;
Для цого потрібно ввести утерміналі ультиліту та додати до неї --version.
в результаті отримали такі данні 
make --version ---> GNU Make 4.3
clang --version ---> Ubuntu clang version 14.0.0-1ubuntu1
11.Дослідити роботу утиліти man та описати її призначення.
Взагалі man – це пейджер довідкових сторінок системи. Кожен параметр сторінка, переданий man, зазвичай є назвою програми,
утиліти чи функції. По кожному з цих параметрів виконується пошук та висновок пов'язаної з ним довідкової сторінки. Якщо
вказано параметр розділ, то це змушує man виконувати пошук тільки в цьому довідковий розділ.
Щоб побачити меню man, вводимо команду man man.
В результаті відкилось меню ультитіти man, та мі змогли побачити його меню.
12.За допомогою команди git diff показати виконані зміни у файлах.
Ввести команду git diff та отримати виконані зміни, а саме:
+all: clean prep compile check
diff --git a/lab00/src/lib.h b/lab00/src/lib.h
index 0fe857b..3862b08 100644
--- a/lab00/src/lib.h
+++ b/lab00/src/lib.h
@@ -19,7 +19,7 @@
 /**
  * Кількість тварин у масиві
  */
-#define ANIMAL_COUNT 10
+#define ANIMAL_COUNT 17
Тобто ми бачимо 2 зміни після огляду виконаної команди.
+all: clean prep compile check
+#define ANIMAL_COUNT 17

Тобто на цій лабораторній роботі ми изнайомилися та вивчили основні ультиліти. Також змогли попрактиковатися 
та навчилися шукати потрібну інформацію в коді, дізналися як та де краще використовувати потрібну ультиліту.
